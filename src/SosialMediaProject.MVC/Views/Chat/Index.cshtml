@model List<AppUser>
<!DOCTYPE html>
<html lang="en">

<!-- Mirrored from social.webestica.com/messaging.html by HTTrack Website Copier/3.x [XR&CO'2014], Thu, 01 Feb 2024 18:37:42 GMT -->
<head>
	<h1>Social - Network</h1>

	<!-- Meta Tags -->
	<meta charset="utf-8">
	<meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
	<meta name="author" content="Webestica.com">
	<meta name="description" content="Bootstrap 5 based Social Media Network and Community Theme">

	<!-- Dark mode -->
	<script>
		const storedTheme = localStorage.getItem('theme')

		const getPreferredTheme = () => {
			if (storedTheme) {
				return storedTheme
			}
			return window.matchMedia('(prefers-color-scheme: light)').matches ? 'light' : 'light'
		}

		const setTheme = function (theme) {
			if (theme === 'auto' && window.matchMedia('(prefers-color-scheme: dark)').matches) {
				document.documentElement.setAttribute('data-bs-theme', 'dark')
			} else {
				document.documentElement.setAttribute('data-bs-theme', theme)
			}
		}

		setTheme(getPreferredTheme())

		window.addEventListener('DOMContentLoaded', () => {
			var el = document.querySelector('.theme-icon-active');
			if (el != 'undefined' && el != null) {
				const showActiveTheme = theme => {
					const activeThemeIcon = document.querySelector('.theme-icon-active use')
					const btnToActive = document.querySelector(`[data-bs-theme-value="${theme}"]`)
					const svgOfActiveBtn = btnToActive.querySelector('.mode-switch use').getAttribute('href')

					document.querySelectorAll('[data-bs-theme-value]').forEach(element => {
						element.classList.remove('active')
					})

					btnToActive.classList.add('active')
					activeThemeIcon.setAttribute('href', svgOfActiveBtn)
				}

				window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', () => {
					if (storedTheme !== 'light' || storedTheme !== 'dark') {
						setTheme(getPreferredTheme())
					}
				})

				showActiveTheme(getPreferredTheme())

				document.querySelectorAll('[data-bs-theme-value]')
					.forEach(toggle => {
						toggle.addEventListener('click', () => {
							const theme = toggle.getAttribute('data-bs-theme-value')
							localStorage.setItem('theme', theme)
							setTheme(theme)
							showActiveTheme(theme)
						})
					})

			}
		})

	</script>

	<!-- Favicon -->
	<link rel="shortcut icon" href="~/assets/images/favicon.ico">

	<!-- Google Font -->
	<link rel="preconnect" href="https://fonts.googleapis.com/">
	<link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&amp;display=swap">

	<!-- Plugins CSS -->
	<link rel="stylesheet" type="text/css" href="~/assets/vendor/font-awesome/css/all.min.css">
	<link rel="stylesheet" type="text/css" href="~/assets/vendor/bootstrap-icons/bootstrap-icons.css">
	<link rel="stylesheet" type="text/css" href="~/assets/vendor/OverlayScrollbars-master/css/OverlayScrollbars.min.css" />

	<!-- Theme CSS -->
	<link rel="stylesheet" type="text/css" href="~/assets/css/style.css">

</head>

<body>

	<!-- =======================
	Header START -->
	<!-- =======================
	Header END -->
	<!-- **************** MAIN CONTENT START **************** -->
	<main>

		<!-- Container START -->
		<div class="container">
			<div class="row gx-0">
				<!-- Sidebar START -->
				<div class="col-lg-4 col-xxl-3" id="chatTabs" role="tablist">

					<!-- Divider -->
					<div class="d-flex align-items-center mb-4 d-lg-none">
						<button class="border-0 bg-transparent" type="button" data-bs-toggle="offcanvas" data-bs-target="#offcanvasNavbar" aria-controls="offcanvasNavbar">
							<span class="btn btn-primary"><i class="fa-solid fa-sliders-h"></i></span>
							<span class="h6 mb-0 fw-bold d-lg-none ms-2">Chats</span>
						</button>
					</div>
					<!-- Advanced filter responsive toggler END -->
					<div class="card card-body border-end-0 border-bottom-0 rounded-bottom-0">
						<div class=" d-flex justify-content-between align-items-center">
							<h1 class="h5 mb-0">Chats <span class="badge bg-success bg-opacity-10 text-success"></span></h1>
							<!-- Chat new create message item START -->
							<div class="dropend position-relative">
								<div class="nav">
									<a class="icon-md rounded-circle btn btn-sm btn-primary-soft nav-link toast-btn" data-target="chatToast" href="#"> <i class="bi bi-pencil-square"></i> </a>
								</div>
							</div>
							<!-- Chat new create message item END -->
						</div>
					</div>

					<nav class="navbar navbar-light navbar-expand-lg mx-0">
						<div class="offcanvas offcanvas-start" tabindex="-1" id="offcanvasNavbar">
							<!-- Offcanvas header -->
							<div class="offcanvas-header">
								<button type="button" class="btn-close text-reset ms-auto" data-bs-dismiss="offcanvas"></button>
							</div>

							<!-- Offcanvas body -->
							<div class="offcanvas-body p-0">
								<div class="card card-chat-list rounded-end-lg-0 card-body border-end-lg-0 rounded-top-0">

									<!-- Search chat START -->
									<form class="position-relative">
										<input class="form-control py-2" type="search" placeholder="Search for chats" aria-label="Search">
										<button class="btn bg-transparent text-secondary px-2 py-0 position-absolute top-50 end-0 translate-middle-y" type="submit">
											<i class="bi bi-search fs-5"></i>
										</button>
									</form>
									<!-- Search chat END -->
									
									<!-- Chat list tab START -->
									<div class="mt-4 h-100">
										<div class="chat-tab-list custom-scrollbar">
											<ul class="nav flex-column nav-pills nav-pills-soft">
												@foreach (var item in Model)
												{
													<li data-bs-dismiss="offcanvas">
														<a href="#chat-@item.Id" class="nav-link text-start" id="chat-@item.Id-tab" data-bs-toggle="pill" role="tab">
															<div class="d-flex">
																<div id="@item.Id" class="flex-shrink-0 avatar me-2 status-@(item.ConnectionId != null ? "online" : "offline")">
																	@if (item.PhotoUrl == null)
																	{
																		<img class="avatar-img rounded-circle" src="https://i.insider.com/589a002a6e09a824008b5c31?width=600&format=jpeg&auto=webp" />
																	}
																	else
																	{
																		<img class="avatar-img rounded-circle" src="~/uploads/appusers/@item.PhotoUrl" alt="">
																	}

																</div>
																<div class="flex-grow-1 d-block">
																	<h6 data-id="@item.Id" class="fullname mb-0 mt-1 ">@item.FullName</h6>

																</div>
															</div>
														</a>
													</li>
												}
												<!-- Chat user tab item -->

											</ul>
										</div>
									</div>
									<!-- Chat list tab END -->
								</div>
							</div>
						</div>
					</nav>
				</div>
				<!-- Sidebar START -->
				<!-- Chat conversation START -->

				<div class="col-lg-8 col-xxl-9">
					<div class="card card-chat rounded-start-lg-0 border-start-lg-0">
						<div class="card-body h-100">

							<div class="tab-content py-0 mb-0 h-100" id="chatTabsContent">
								<!-- Conversation item START -->
								@foreach (var item in Model)
								{
									<div class="fade tab-pane h-100" id="chat-@item.Id" role="tabpanel" aria-labelledby="chat-2-tab">
										<!-- Top avatar and status START -->
										<div class="d-sm-flex justify-content-between align-items-center">
											<div class="d-flex mb-2 mb-sm-0">
												<div id="@item.Id" class="flex-shrink-0 avatar me-2 ">

													@if (item.PhotoUrl == null)
													{
														<img class="avatar-img rounded-circle" src="https://i.insider.com/589a002a6e09a824008b5c31?width=600&format=jpeg&auto=webp" />
													}
													else
													{
														<img class="avatar-img rounded-circle" src="~/uploads/appusers/@item.PhotoUrl " alt="">
													}

												</div>
												<div class="d-block flex-grow-1">
													<h6 id="@item.Id" class=" mb-0 mt-1">@item.FullName</h6>

													<div class="small text-secondary"><i class="fa-solid fa-circle text-@(item.ConnectionId !=null ? "success" : "danger" ) me-1"></i>@(item.ConnectionId != null ? "Online" : "OffLine")</div>

												</div>
											</div>
											<div class="d-flex align-items-center">

												<!-- Card action START -->
												<div class="dropdown">
													<a class="icon-md rounded-circle btn btn-primary-soft me-2 px-2" href="#" id="chatcoversationDropdown2" role="button" data-bs-toggle="dropdown" data-bs-auto-close="outside" aria-expanded="false"><i class="bi bi-three-dots-vertical"></i></a>
													<ul class="dropdown-menu dropdown-menu-end" aria-labelledby="chatcoversationDropdown2">
														<li><a class="dropdown-item" href="#"><i class="bi bi-check-lg me-2 fw-icon"></i>Mark as read</a></li>
														<li><a class="dropdown-item" href="#"><i class="bi bi-mic-mute me-2 fw-icon"></i>Mute conversation</a></li>
														<li><a class="dropdown-item" href="#"><i class="bi bi-person-check me-2 fw-icon"></i>View profile</a></li>
														<li><a class="dropdown-item" href="#"><i class="bi bi-trash me-2 fw-icon"></i>Delete chat</a></li>
														<li class="dropdown-divider"></li>
														<li><a class="dropdown-item" href="#"><i class="bi bi-archive me-2 fw-icon"></i>Archive chat</a></li>
													</ul>
												</div>
												<!-- Card action END -->
											</div>
										</div>
										<!-- Top avatar and status END -->
										<hr>
										<!-- Chat conversation START -->
										<div class="chat-conversation-content overflow-auto custom-scrollbar">
											<!-- Chat time -->
											<div class="text-center small my-2">Jul 16, 2022, 06:15 am</div> 
											<!-- Chat message left -->
											<div class="d-flex mb-1">
										<div class="flex-shrink-0 avatar avatar-xs me-2">
										<img class="avatar-img rounded-circle" src="~/assets/images/avatar/11.jpg" alt="">
										</div>
										<div class="flex-grow-1">
										<div class="w-100">
										<div class="d-flex flex-column align-items-start">
										<div class="bg-light text-secondary p-2 px-3 rounded-2">Night signs creeping yielding green Seasons.</div>
										<div class="small my-2">6:15 AM</div>
										</div>
										</div>
										</div>
										</div>
										<!-- Chat message right -->
										<div class="d-flex justify-content-end text-end mb-1">
										<div class="w-100">
										<div class="d-flex flex-column align-items-end">
										<div class="bg-primary text-white p-2 px-3 rounded-2">Creeping earth under was You're without which image.</div>
										<div class="d-flex my-2">
										<div class="small text-secondary">6:20 AM</div>
										<div class="small ms-2"><i class="fa-solid fa-check-double text-info"></i></div>
										</div>
										</div>
										</div>
										</div>
											@* <div class=" p-1">
												<div>Message</div>
												<div><input type="text" class="w-100" id="privateMessageInput" /></div>
											</div>
											<div class=" p-1">
												<div>
													<input type="button" id="privateSendButton" value="Send Message" />
												</div>
											</div>
											<div class=" p-1">
												<div>
													<ul id="privateMessagesList"></ul>
												</div>
											</div> *@


										</div>
										<!-- Chat conversation END -->
									</div>
								}



							</div>

						</div>
						<div class="card-footer">
							<div class="d-sm-flex align-items-end">
								<textarea class="form-control mb-sm-0 mb-3" data-autoresize placeholder="Type a message" rows="1"></textarea>

								<button class="btn btn-sm btn-primary ms-2"><i class="fa-solid fa-paper-plane fs-6"></i></button>
							</div>
						</div>
					</div>
				</div>




				<!-- Chat conversation END -->
			</div> <!-- Row END -->
			<!-- =======================
			Chat END -->

		</div>
		<!-- Container END -->

	</main>
	<!-- **************** MAIN CONTENT END **************** -->
	<!-- Chat END -->
	<!-- Bootstrap JS -->
	<script src="~/assets/vendor/bootstrap/dist/js/bootstrap.bundle.min.js"></script>

	<!-- Vendors -->
	<script src="~/assets/vendor/OverlayScrollbars-master/js/OverlayScrollbars.min.js"></script>

	<!-- Theme Functions -->
	<script src="~/assets/js/functions.js"></script>
	@section Scripts {
		<script>
			const fullnames = document.querySelectorAll(".fullname");

			fullnames.forEach(name => {
				name.addEventListener("click", function (e) {
					e.preventDefault();
					const id = fullname.getAttribute("data-id");
					console.log(id);
				})
			})

			// const fullnames = document.querySelectorAll(".fullname");

			// fullnames.forEach(name => {
			// 	name.addEventListener("click", function (e) {
			// 		e.preventDefault();
			// 		document.getElementById("privateSendButton").addEventListener("click", function () {
			// 			const privateInputValue = document.getElementById("privateMessageInput");
			// 			const url = name.getAttribute("data-id") + "&message" + privateInputValue.value;
			// 			fetch(url)
			// 				.then(response => console.log(response.status));
			// 			console.log(url);
			// 		})
			// 	})
			// })
			// document.querySelectorAll(".private-message").forEach(name => {
			// 	name.addEventListener("click", function (e) {
			// 		e.preventDefault();
			// 		document.getElementById("privateSendButton").addEventListener("click", function () {
			// 			const privateInputValue = document.getElementById("privateMessageInput");

			// 			const url = name.getAttribute("href") + "&message" + privateInputValue.value;

			// 			fetch(url)
			// 				.then(response => console.log(response.status));
			// 		})
			// 	})
			// })

			connection.on("SendMessagePrivate", function (message) {
				// alert(message);
				const li = document.createElement("li");
				li.innerText = message;
				document.getElementById("privateMessagesList").appendChild(li);
			})

			


			document.getElementById("sendButton").addEventListener("click", function () {
				const userValue = document.getElementById("userInput").value;
				const messageValue = document.getElementById("messageInput").value;

				connection.invoke("SendMessage", userValue, messageValue);
			})


			connection.on("ReceiveMessage", function (user, message) {
				const li = document.createElement("li");
				li.innerText = user + ": " + message;
				document.getElementById("messagesList").append(li);
			})

			connection.on("SendMessage", function (user, message) {
				const li = document.createElement("li");
				li.innerText = user + ": " + message;
				document.getElementById("messagesList").append(li);
			})

			connection.on("OnConnect", function (userId) {
				document.getElementById(userId).classList.remove("bg-danger");
				document.getElementById(userId).classList.add("bg-success");
			})


			connection.on("DisConnect", function (userId) {
				document.getElementById(userId).classList.remove("bg-success");
				document.getElementById(userId).classList.add("bg-danger");
			})

		</script>

	}
</body>

<!-- Mirrored from social.webestica.com/messaging.html by HTTrack Website Copier/3.x [XR&CO'2014], Thu, 01 Feb 2024 18:37:42 GMT -->
</html>